{"version":3,"sources":["hoc/withAuthRedirect.js","components/Users/users.module.css","components/Content/ContentInfo/ContentInfo.module.css","components/Content/MyPosts/Post/Post.module.css","components/Nav/Nav.module.css","reportWebVitals.js","api/Api.js","redux/Content-reducer.js","redux/Sidebar-reducer.js","Utils/object-helpers.js","redux/Users-reducer.js","redux/Auth-reducer.js","redux/App-reducer.js","redux/redux-store.js","components/Nav/Nav.jsx","assets/images/user4.jpg","components/common/Paginator/Paginator.js","components/Users/User.js","components/Users/Users.js","assets/images/preloader06.svg","components/common/Preloader/Preloader.js","redux/users-selectors.js","components/Users/UsersContainer.js","components/Content/ContentInfo/ProfileStatusWithHooks.js","components/Content/ContentInfo/ContentInfo.jsx","components/Content/MyPosts/Post/Post.jsx","components/Content/MyPosts/MyPosts.jsx","components/Content/MyPosts/MyPostsContainer.jsx","components/Content/Content.jsx","components/Content/ContentContainer.jsx","components/Header/Header.jsx","components/Header/Header-Container.jsx","components/Login/Login.jsx","App.js","index.js","Utils/validators/validators.js","components/common/FormsControls/FormsControls.js","components/common/FormsControls/FormsControls.module.css","components/common/Paginator/Paginator.module.css","components/Content/MyPosts/MyPosts.module.css","components/Header/Header.module.css","redux/Dialogs-reducer.js"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","withCredentials","baseURL","headers","usersAPI","getUsers","currentPage","pageSize","get","response","data","follow","userId","post","unfollow","delete","getProfile","console","warn","profileAPI","getStatus","updateStatus","status","put","authAPI","email","password","rememberMe","ADD_POST","SET_USER_PROFILE","SET_STATUS","DELETE_POST","initialState","postData","id","message","likesCount","profile","setStatus","type","contentReducer","action","newPost","newPostText","filter","p","postId","sidebarReducer","updateObjectInArray","items","itemId","objPropName","newObjProps","map","u","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","users","totalUsersCount","isFetching","followingInProgress","followSuccess","unfollowSuccess","setCurrentPage","toggleIsFetching","toggleFollowingProgress","followUnfollow","dispatch","apiMethod","actionCreator","a","resultCode","usersReducer","followed","count","SET_USER_DATA","login","setAuthUserData","payload","getAuthUserData","authReducer","INITIALIZED_SUCCESS","initialized","appReducer","reducers","combineReducers","contentPage","dialogsPage","dialogsReducer","sidebar","usersPage","form","formReducer","app","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","__store__","Nav","className","classes","nav","item","navData","isActive","active","Paginator","pagesCount","Math","ceil","totalItemsCount","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","styles","paginator","onClick","cn","selectedPage","pageNumber","e","onPageChanged","User","user","src","photos","small","userPhoto","disabled","some","name","Users","Preloader","preloader","createSelector","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersContainer","bind","page","totalCount","ProfileStatusWithHooks","editMode","setEditMode","useEffect","onDoubleClick","onChange","currentTarget","value","autoFocus","onBlur","ContentInfo","descriptionBlock","large","Post","maxLength10","maxLengthCreator","MyPosts","memo","log","postsElements","postsBlock","AddNewPostForm","onSubmit","values","addPost","posts","reduxForm","handleSubmit","Field","component","Textarea","placeholder","validate","required","MyPostsContainer","addPostActionCreator","Content","ContentContainer","match","params","authorizedUserId","getUserProfile","useMatch","Header","header","loginBlock","logout","HeaderContainer","LoginReduxForm","error","Input","style","formSummaryError","messages","length","stopSubmit","_error","replace","formData","DialogsContainer","lazy","App","initializeApp","path","element","fallback","promise","Promise","all","ReactDOM","render","StrictMode","document","getElementById","maxLength","FormControl","input","meta","touched","children","hasError","formControl","restProps","child","SEND_MESSAGE","dialogsData","messagesData","sendMessageCreator","newMessageBody","body"],"mappings":"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","file":"static/js/main.045a07b5.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth /*тут придут данные об авторизации и мы прокинем их в dialogs*/\r\n});\r\n\r\n\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Navigate to={\"/login\"} /> ; /*если мы не залогинены то вернется редирект на логин*/\r\n            return <Component {...this.props}/> /*все пропсы деструктуризацией прокидываем в целевую компоненту*/\r\n        }\r\n    }\r\n    /*создали connect к стору для получением Auth специально для RedirectComponent*/\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\n\r\n\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"users_userPhoto__1dmoz\",\"selectedPage\":\"users_selectedPage__2fnhC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ContentInfo_descriptionBlock__73U7i\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2QjdK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Nav_nav__ZwvNP\",\"item\":\"Nav_item__2Gs1e\",\"active\":\"Nav_active__375pZ\"};","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import * as axios from \"axios\";\r\n\r\n/*instance это базовая настройка запроса*/\r\nconst instance = axios.create({\r\n\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: { \"api-key\" : \"237de4a2-60b4-4d3d-a09d-4c3e2f0c5c52\"}\r\n\r\n});\r\n\r\nexport const usersAPI = {\r\n\r\n    getUsers(currentPage, pageSize) {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n    },\r\n\r\n    follow(userId) {\r\n        return instance.post(`follow/${userId}`)\r\n    },\r\n\r\n    unfollow(userId) {\r\n        return instance.delete(`follow/${userId}`)\r\n    },\r\n    getProfile(userId) {\r\n        console.warn('Obsolete method. Please profileApi object.') /*раньше тут сидел getProfile и мы сделали пометку что вынесли его */\r\n        return profileAPI.getProfile(userId);\r\n    },\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId) {\r\n        return instance.get(`profile/` + userId);\r\n    },\r\n    getStatus(userId) {\r\n        return instance.get(`profile/status/` + userId);\r\n    },\r\n    updateStatus(status) {\r\n        return instance.put(`profile/status`, { status: status}); /*отправляем на сервак объект status он так называется исходя из документации и он будет содержать наш новый статус*/\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get(`auth/me`);      /*для get и delete запроса нельза отправлять данные*/\r\n    },\r\n    login(email, password, rememberMe = false) {\r\n        return instance.post(`auth/login`, {email, password, rememberMe});    /*для post и put можно отпр данные например email, password*/\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`);\r\n    }\r\n}\r\n\r\n\r\n","import {profileAPI, usersAPI} from \"../api/Api\";\r\n\r\nconst ADD_POST = 'ADD-POST'; //создаем константы type что бы не ошибиться с наименованиями\r\nconst SET_USER_PROFILE = 'SET_USER_PROFILE';\r\nconst SET_STATUS = 'SET_STATUS';\r\nconst DELETE_POST = 'DELETE_POST';\r\n\r\n\r\n/*initialState это стартовый state*/\r\nlet initialState = {\r\n    postData: [\r\n        {id: 1, message: 'Hi, how are you', likesCount: 3},\r\n        {id: 2, message: 'It\\'s my first post', likesCount: 30},\r\n    ],\r\n    profile: null,\r\n    status: \"\"\r\n};\r\n\r\nconst contentReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            let newPost = {\r\n                id: 5,\r\n                message: action.newPostText, /*формируем новый пост беря текст из второго этапа flux*/\r\n                likesCount: 0\r\n            };\r\n            return {\r\n                ...state,\r\n                postData: [...state.postData, newPost],\r\n                newPostText: ''\r\n            };\r\n        }\r\n        case SET_STATUS: {\r\n            return {\r\n                ...state,\r\n                status: action.status //status приходит с сервака и необходимо его предать через action\r\n            };\r\n        }\r\n        case SET_USER_PROFILE: {\r\n            return {\r\n                ...state, profile: action.profile};\r\n        }\r\n        case DELETE_POST: {\r\n            return {\r\n                ...state, postData: state.postData.filter(p => p.id !=action.postId)};\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n/*создаем actionCreator ур39*/\r\n/*export const addPostActionCreator = () => {return {type: ADD_POST}}\r\nможно писать и так но когда наша функция выполняет только return можно ее сократить как ниже*/\r\n\r\nexport const addPostActionCreator = (newPostText) => ({type: ADD_POST, newPostText})  //создаем actioncreator который возвращает сам Action\r\n// Action обладает type и живет в мире BLL___actioncreator нужен чтобы пользователи UI использовали их в мире UI\r\n\r\nexport const setStatus = (status) => ({type: SET_STATUS, status})\r\nexport const deletePost = (postId) => ({type: DELETE_POST, postId})\r\nexport const setUserProfile = (profile) => ({type: SET_USER_PROFILE, profile})\r\n\r\n/*это thunk*/\r\nexport const getUserProfile = (userId) => async (dispatch) => {\r\n    let response = await usersAPI.getProfile(userId);\r\n    dispatch(setUserProfile(response.data)); /*диспатчим не сам actioncreator а его вызов*/\r\n    }\r\n\r\n/*это thunk для получения статуса*/\r\nexport const getStatus = (userId) => async (dispatch) => {\r\n    let response = await profileAPI.getStatus(userId);\r\n    dispatch(setStatus(response.data)); /*диспатчим не сам actioncreator а его вызов*/\r\n    }\r\n\r\n/*это thunk для обновления статуса*/\r\nexport const updateStatus = (status) => async (dispatch) => {\r\n    let response = await profileAPI.updateStatus(status);\r\n    if (response.data.resultCode === 0) {\r\n            dispatch(setStatus(status)); /*диспатчим не сам actioncreator а его вызов*/\r\n        }\r\n    }\r\n\r\nexport default contentReducer;","let initialState = {};\r\n\r\nconst sidebarReducer = (state = initialState, action) => {\r\n\r\n\r\n\r\n    return state;\r\n}\r\n\r\nexport default sidebarReducer;","export const updateObjectInArray = (items,itemId, objPropName, newObjProps)=> {\r\n    return items.map(u => {\r\n        if (u[objPropName] === itemId) {\r\n            return {...u, ...newObjProps}\r\n        }\r\n        return u;\r\n    })\r\n}","import {usersAPI} from \"../api/Api\";\r\nimport {updateObjectInArray} from \"../Utils/object-helpers\";\r\n\r\nconst FOLLOW = 'FOLLOW'; //создаем константы type что бы не ошибиться с наименованиями\r\nconst UNFOLLOW = 'UNFOLLOW';\r\nconst SET_USERS = 'SET_USERS';\r\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\r\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT';\r\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING';\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS';\r\n\r\n/*initialState это стартовый state*/\r\nlet initialState = {\r\n    users: [],\r\n    pageSize: 5,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: []\r\n\r\n};\r\n\r\nconst usersReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: true})\r\n                /*users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u;\r\n                })*/\r\n            }\r\n\r\n\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: false})\r\n                /*users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u;\r\n                })*/\r\n            }\r\n\r\n        case SET_USERS: {\r\n            return {...state, users: action.users}\r\n        }\r\n        case SET_CURRENT_PAGE: {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case SET_TOTAL_USERS_COUNT: {\r\n            return {...state, totalUsersCount: action.count}\r\n        }\r\n        case TOGGLE_IS_FETCHING: {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS: {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id != action.userId)\r\n            }\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const followSuccess = (userId) => ({type: FOLLOW, userId})\r\n\r\nexport const unfollowSuccess = (userId) => ({type: UNFOLLOW, userId})\r\n\r\nexport const setUsers = (users) => ({type: SET_USERS, users})\r\n\r\nexport const setCurrentPage = (currentPage) => ({type: SET_CURRENT_PAGE, currentPage})\r\n\r\nexport const setTotalUsersCount = (totalUsersCount) => ({type: SET_TOTAL_USERS_COUNT, count: totalUsersCount})\r\n\r\nexport const toggleIsFetching = (isFetching) => ({type: TOGGLE_IS_FETCHING, isFetching})\r\n\r\nexport const toggleFollowingProgress = (isFetching, userId) => ({\r\n    type: TOGGLE_IS_FOLLOWING_PROGRESS,\r\n    isFetching,\r\n    userId\r\n})\r\n\r\n/*это thunk*/\r\nexport const requestUsers = (page, pageSize) => {\r\n    return async (dispatch) => {\r\n        dispatch(toggleIsFetching(true));\r\n        dispatch(setCurrentPage(page)); //отображает текущую страничку юзеров\r\n\r\n        let data = await usersAPI.getUsers(page, pageSize)\r\n        dispatch(toggleIsFetching(false));\r\n        dispatch(setUsers(data.items));\r\n        dispatch(setTotalUsersCount(data.totalCount));\r\n    }\r\n}\r\n/*общая функция для follow и unfollow с общей логикой*/\r\nconst followUnfollow = async (dispatch, userId, apiMethod, actionCreator) => {\r\n    dispatch(toggleFollowingProgress(true, userId));\r\n    let response = await apiMethod(userId);\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(toggleFollowingProgress(false, userId));\r\n}\r\n\r\n/*это thunk*/\r\nexport const follow = (userId) => {\r\n    return async (dispatch) => {\r\n        let apiMethod = usersAPI.follow.bind(usersAPI);\r\n        followUnfollow(dispatch, userId, apiMethod, followSuccess)\r\n    }\r\n}\r\n\r\n/*это thunk*/\r\nexport const unfollow = (userId) => {\r\n    return async (dispatch) => {\r\n        let apiMethod = usersAPI.unfollow.bind(usersAPI);\r\n        followUnfollow(dispatch, userId, apiMethod, unfollowSuccess)\r\n    }\r\n}\r\n\r\nexport default usersReducer;","import {authAPI} from \"../api/Api\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\n\r\nconst SET_USER_DATA = 'auth/SET_USER_DATA'; //создаем константы type что бы не ошибиться с наименованиями и добавляем auth/ для уникальности\r\n\r\n\r\n/*initialState это стартовый state*/\r\nlet initialState = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false\r\n};\r\n\r\nconst authReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n\r\n        /*payload раньше назывался data*/\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const setAuthUserData = (id, email, login, isAuth) => ({\r\n    type: SET_USER_DATA,\r\n    payload: {id, email, login, isAuth}\r\n})\r\n\r\n/*это thunk*/\r\n/*тут мы отправляем запрос на me и если мы зологинены то возвр resultCode === 0\r\nи мы сетаем наш state с данными пользователя и меняется isAuth: false на isAuth: true*/\r\nexport const getAuthUserData = () => async (dispatch) => {\r\n    let response = await authAPI.me();\r\n    if (response.data.resultCode === 0) {\r\n        let {id, login, email} = response.data.data;\r\n        dispatch(setAuthUserData(id, email, login, true));/*диспатчим не сам actioncreator а его вызов*/\r\n    }\r\n}\r\n\r\n/*это thunk для логинизации*/\r\nexport const login = (email, password, rememberMe) => async (dispatch) => {\r\n\r\n    let response = await authAPI.login(email, password, rememberMe);\r\n\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(getAuthUserData()); /*диспатчим не сам actioncreator а его вызов и если ответ будет с ошибкой запустится stopSubmit*/\r\n        } else {\r\n            let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\";\r\n\r\n            /*тут указываем какую форму мы стопаем и указываем ошибку на все поля с помощью _email*/\r\n            dispatch(stopSubmit('login', {_error: message}));\r\n        }\r\n}\r\n\r\n/*это thunk для вылогинизации*/\r\nexport const logout = () => async (dispatch) => {\r\n    let response = await authAPI.logout();\r\n    if (response.data.resultCode === 0) {\r\n            dispatch(setAuthUserData(null, null, null, false));/*диспатчим не сам actioncreator а его вызов*/\r\n        }\r\n}\r\n\r\nexport default authReducer;","import {getAuthUserData} from \"./Auth-reducer\";\r\n\r\n\r\n\r\nconst INITIALIZED_SUCCESS = 'INITIALIZED_SUCCESS'; //создаем константы type что бы не ошибиться с наименованиями\r\n\r\n\r\n/*initialState это стартовый state*/\r\nlet initialState = {\r\n    initialized: false,\r\n\r\n};\r\n\r\nconst appReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n\r\n        case INITIALIZED_SUCCESS:\r\n            return  {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n\r\n            default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const initializedSuccess = () => ({ type: INITIALIZED_SUCCESS})\r\n\r\n/*это thunk*/\r\nexport const initializeApp = () => (dispatch) => {\r\n    let promise =  dispatch(getAuthUserData());\r\n    //dispatch(getAuthUserData()); при инициализации диспатчей может быть множество\r\n    //dispatch(getAuthUserData());\r\nPromise.all ([promise])\r\n    .then( () => { dispatch (initializedSuccess()) })  /*когда getAuthUserData получит результат запустится initializedSuccess */\r\n\r\n}\r\n\r\nexport default appReducer;","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport contentReducer from \"./Content-reducer\";\r\nimport dialogsReducer from \"./Dialogs-reducer\";\r\nimport sidebarReducer from \"./Sidebar-reducer\";\r\nimport usersReducer from \"./Users-reducer\";\r\nimport authReducer from \"./Auth-reducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport { reducer as formReducer} from 'redux-form'\r\nimport appReducer from \"./App-reducer\";\r\n\r\nlet reducers = combineReducers({\r\n    contentPage: contentReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer\r\n});\r\n\r\n//так создаем стор чтобы подключить расширение redux devtools\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n\r\n//старый код так раньше создавали стор  -  let store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n//создаем редаксовский store и отдам ему закомбайненые редьюсеры\r\n//и тутже внедряем промежуточный уровень thunkMiddleware\r\n\r\nwindow.__store__ = store;\r\nexport default store;","import React, { Component } from 'react';\r\nimport classes from './Nav.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Nav = () =>{\r\n    return (<nav className={classes.nav}>\r\n        <div className={classes.item}>\r\n          <NavLink to=\"/profile\" className={navData => navData.isActive ? classes.active : classes.item}>Profile</NavLink>\r\n        </div>\r\n        <div className={classes.item}>\r\n          <NavLink to=\"/dialogs\" className={navData => navData.isActive ? classes.active : classes.item}>Messages</NavLink>\r\n        </div>\r\n        <div className={classes.item}>\r\n            <NavLink to=\"/users\" className={navData => navData.isActive ? classes.active : classes.item}>Users</NavLink>\r\n        </div>\r\n        <div className={classes.item}>\r\n          <a>News</a>\r\n        </div>\r\n        <div className={classes.item}>\r\n          <a>Music</a>\r\n        </div>\r\n        <div className={classes.item}>\r\n          <a>Settings</a>\r\n        </div>\r\n      </nav>)\r\n}\r\n\r\nexport default Nav;","export default __webpack_public_path__ + \"static/media/user4.75052a87.jpg\";","import React, {useState} from \"react\";\r\nimport styles from \"./Paginator.module.css\";\r\nimport cn from \"classnames\";\r\n\r\nlet Paginator = (props) => {\r\n\r\n    let pagesCount = Math.ceil( props.totalItemsCount / props.pageSize);\r\n    let portionSize = 10;\r\n\r\n    let pages = [];\r\n    for (let i=1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n\r\n    let portionCount = Math.ceil(pagesCount / portionSize);\r\n    let [portionNumber, setPortionNumber] = useState(1);    /*подключаем локальный стейт для пагинатора*/\r\n    let leftPortionPageNumber = (portionNumber -1) * portionSize +1; /*формура для вычисления левого крайнего номера*/\r\n    let rightPortionPageNumber = portionNumber * portionSize;        /*формура для вычисления правого крайнего номера*/\r\n\r\n\r\n    /*показываем кнопку влево если номер порции больше 1*/\r\n    return (\r\n    <div className={styles.paginator}>\r\n        { portionNumber > 1 &&\r\n        <button onClick={() => { setPortionNumber(portionNumber - 1) }}>PREV</button> }\r\n\r\n        {pages\r\n            .filter(p => p >= leftPortionPageNumber && p<=rightPortionPageNumber)\r\n            .map((p) => {\r\n                return <span className={ cn({\r\n                    [styles.selectedPage]: props.currentPage === p\r\n                }, styles.pageNumber) }\r\n                             key={p}\r\n                             onClick={(e) => {\r\n                                 props.onPageChanged(p);\r\n                             }}>{p}</span>\r\n            })}\r\n        { portionCount > portionNumber &&\r\n        <button onClick={() => { setPortionNumber(portionNumber + 1) }}>NEXT</button> }\r\n\r\n\r\n    </div>)\r\n}\r\nexport default Paginator;","import React from \"react\";\r\nimport styles from \"./users.module.css\";\r\nimport userPhoto from \"../../assets/images/user4.jpg\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport Paginator from \"../common/Paginator/Paginator\";\r\n\r\nlet User = ({user, followingInProgress, unfollow, follow}) => {\r\n\r\n    return (\r\n        <div>\r\n                <span>\r\n                    <div>\r\n                        <NavLink to={'/profile/' + user.id}>\r\n                        <img src={user.photos.small != null ? user.photos.small : userPhoto} className={styles.userPhoto}/>\r\n                        </NavLink>\r\n                    </div>\r\n                    <div>\r\n                        {user.followed ?\r\n                            <button disabled={followingInProgress.some(id => id === user.id)}\r\n                                    onClick={() => {\r\n                                        unfollow(user.id)\r\n                                    }}>Unfollow</button> :\r\n                            <button disabled={followingInProgress.some(id => id === user.id)}\r\n                                    onClick={() => {\r\n                                        follow(user.id)\r\n                                    }}>Follow</button>}\r\n\r\n                    </div>\r\n                </span>\r\n            <span>\r\n                    <span>\r\n                        <div>{user.name}</div>\r\n                        <div>{user.status}</div>\r\n                    </span>\r\n                    <span>\r\n                        <div>{\"user.location.country\"}</div>\r\n                        <div>{\"user.location.city\"}</div>\r\n                    </span>\r\n                </span>\r\n\r\n        </div>)\r\n\r\n}\r\n\r\nexport default User;","import React from \"react\";\r\nimport User from \"./User\";\r\nimport Paginator from \"../common/Paginator/Paginator\";\r\n\r\n\r\nlet Users = ({currentPage, onPageChanged, totalUsersCount, pageSize, users, ...props}) => {\r\n\r\n    return <div>\r\n        <div>\r\n        <Paginator currentPage={currentPage} onPageChanged={onPageChanged} totalItemsCount={totalUsersCount} pageSize={pageSize}/>\r\n        </div>\r\n        <div>\r\n            { users.map(u => <User user={u}\r\n                                       key={u.id}\r\n                                       follow={props.follow}\r\n                                       unfollow={props.unfollow}\r\n                                       followingInProgress={props.followingInProgress}/>) }\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default Users;","export default __webpack_public_path__ + \"static/media/preloader06.72627050.svg\";","import preloader from \"../../../assets/images/preloader06.svg\";\r\nimport React from \"react\";\r\n\r\nlet Preloader =(props) => {\r\n    return <img src={preloader}/>\r\n}\r\n\r\nexport default Preloader;","import {createSelector} from \"reselect\";\r\n\r\nconst getUsersSelector = (state) =>{\r\n    return state.usersPage.users;\r\n}\r\n\r\nexport const getUsers = createSelector(getUsersSelector, (users) => {\r\n    return users.filter(u => true);\r\n})\r\n\r\nexport const getPageSize = (state) =>{\r\n    return state.usersPage.pageSize;\r\n}\r\n\r\nexport const getTotalUsersCount = (state) =>{\r\n    return state.usersPage.totalUsersCount;\r\n}\r\n\r\nexport const getCurrentPage = (state) =>{\r\n    return state.usersPage.currentPage;\r\n}\r\n\r\nexport const getIsFetching = (state) =>{\r\n    return state.usersPage.isFetching;\r\n}\r\n\r\nexport const getFollowingInProgress = (state) =>{\r\n    return state.usersPage.followingInProgress;\r\n}\r\n","import React from 'react';\r\nimport Users from './Users';\r\nimport {connect} from 'react-redux';\r\nimport {\r\n    follow,\r\n    setCurrentPage,\r\n    unfollow, toggleFollowingProgress, requestUsers\r\n} from '../../redux/Users-reducer';\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport {compose} from \"redux\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUsersCount, getUsers\r\n} from \"../../redux/users-selectors\";\r\n\r\n\r\nclass UsersContainer extends React.Component {\r\n\r\n    componentDidMount() {\r\n        const {currentPage,pageSize} = this.props;\r\n        this.props.getUsers(currentPage, pageSize);\r\n    }\r\n\r\n\r\n    onPageChanged = (pageNumber) => {\r\n        const {pageSize} = this.props;\r\n        this.props.getUsers(pageNumber, pageSize);\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching ? <Preloader /> : null}\r\n            < Users totalUsersCount={this.props.totalUsersCount}\r\n                    pageSize={this.props.pageSize}\r\n                    currentPage={this.props.currentPage}\r\n                    onPageChanged={this.onPageChanged}\r\n                    users={this.props.users}\r\n                    follow={this.props.follow}\r\n                    unfollow={this.props.unfollow}\r\n                    followingInProgress={this.props.followingInProgress}\r\n            />\r\n        </>\r\n    }\r\n}\r\n\r\n\r\n/*let mapStateToProps = (state) => {\r\n    return {\r\n        users: state.usersPage.users,\r\n        pageSize: state.usersPage.pageSize,\r\n        totalUsersCount: state.usersPage.totalUsersCount,\r\n        currentPage: state.usersPage.currentPage,\r\n        isFetching: state.usersPage.isFetching,\r\n        followingInProgress: state.usersPage.followingInProgress\r\n    }\r\n}*/\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        users: getUsers(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state)\r\n    }\r\n}\r\n\r\n/*/!*тут мы вызываем HOC с нужной целевой компонентой*!/\r\n/!*AuthRedirectComponent построили над ContentContainer*!/\r\nlet AuthRedirectComponent = withAuthRedirect(UsersContainer);\r\n\r\nexport default connect(mapStateToProps, {\r\n    follow,\r\n    unfollow,\r\n    toggleFollowingProgress,\r\n    setCurrentPage,\r\n    getUsers})(AuthRedirectComponent);*/\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {follow, unfollow, toggleFollowingProgress, setCurrentPage, getUsers: requestUsers}),\r\n    //withAuthRedirect\r\n)(UsersContainer)","import React, {useEffect, useState} from 'react';\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false); /*с помощью хука создоем LocalState для editMode*/\r\n    let [status, setStatus] = useState(false);     /*с помощью хука создоем LocalState для status*/\r\n\r\n    useEffect( () => {\r\n        setStatus(props.status); /*синхронизируем status из локального стейта со статусом в пропсах*/\r\n    }, [props.status] );  /*указываем зависимость этого хука от props.status При получении нового статуса в пропсах произойдет перерисовка*/\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);  /* через второй элемент setEditMode меняем значение на true*/\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);  /* через второй элемент setEditMode меняем значение на false*/\r\n        props.updateStatus(status); /* отправляем актуальный статус на сервак*/\r\n    }\r\n\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value);  /* при каждом напечатывании символа через второй элемент setStatus меняем Local state*/\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            { !editMode &&\r\n            <div>\r\n                <span onDoubleClick={ activateEditMode }>{props.status || \"---\"}</span>\r\n            </div>}\r\n            { editMode &&\r\n            <div>\r\n                <input onChange={ onStatusChange } autoFocus={true} onBlur={deactivateEditMode} value={status}/>\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks;","import React from 'react';\r\nimport classes from './ContentInfo.module.css';\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\n\r\n\r\nconst ContentInfo = (props) => {\r\n\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <img src='https://images.ctfassets.net/hrltx12pl8hq/7yQR5uJhwEkRfjwMFJ7bUK/dc52a0913e8ff8b5c276177890eb0129/offset_comp_772626-opt.jpg?fit=fill&w=800&h=300'/>\r\n            </div>\r\n            <div className={classes.descriptionBlock}>\r\n                <img src={props.profile.photos.large}/>\r\n                <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ContentInfo;","import React, { Component } from 'react';\r\nimport classes from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\nreturn (\r\n    <div className={classes.item}>\r\n      <img src='https://uprostim.com/wp-content/uploads/2021/05/image011-7.jpg' />\r\n     { props.message }\r\n      <div>\r\n        <span>like</span> { props.likesCount }\r\n      </div>\r\n    </div>\r\n  )\r\n  }\r\n\r\nexport default Post;","import React, {Component} from 'react';\r\nimport classes from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../Utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\n\r\nconst maxLength10 = maxLengthCreator(10)  /*отдельно создали часть validate*/\r\n\r\nconst MyPosts = React.memo(props => {\r\n    console.log(\"RENDER YO\");\r\n\r\n    let postsElements = props.postData.map(p => <Post message={p.message} likesCount={p.likesCount}/>);\r\n    let newPostElement = React.createRef(); /*sozdaem ssylky*/\r\n\r\n    /*когда форма соберет все данные вызовится эта функция sendMessage со значением newMessageBody*/\r\n    let addNewMessage = (values) => {\r\n        props.sendMessage(values.newMessageBody);\r\n    }\r\n\r\n    /*когда форма соберет все данные вызовится эта функция onAddPost со значением newPostText*/\r\n    let onAddPost = (values) => {\r\n        props.addPost(values.newPostText);\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={classes.postsBlock}>\r\n            <h3>My posts</h3>\r\n            < AddNewPostForm onSubmit={onAddPost}/>\r\n\r\n            <div className={classes.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n})\r\n\r\nconst MyPostsForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name={\"newPostText\"} component={Textarea} placeholder={\"Post message\"} validate={[required, maxLength10 ]} />\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddNewPostForm = reduxForm ({form: \"ProfileAddNewPostForm\"}) (MyPostsForm); /*создаем контейнерную вокруг MyPostsForm*/\r\n\r\nexport default MyPosts;","import React, {Component} from 'react';\r\nimport {addPostActionCreator} from \"../../../redux/Content-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\n//первая функция превращает часть state в props\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        postData: state.contentPage.postData,\r\n        newPostText: state.contentPage.newPostText\r\n    }\r\n}\r\n\r\n//вторая функция обрабатывает callback которые мы отправляем в презентационную компоненту\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPost: (newPostText) => {dispatch(addPostActionCreator(newPostText))},\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport ContentInfo from \"./ContentInfo/ContentInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\n\r\n\r\nconst Content = (props) => {\r\n    return (\r\n    <div>\r\n\r\n        <ContentInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\r\n        <MyPostsContainer />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Content;","import React from 'react';\r\nimport Content from \"./Content\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, updateStatus} from '../../redux/Content-reducer';\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {useMatch} from \"react-router-dom\";\r\n\r\n\r\nclass ContentContainer extends React.Component {\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.match ? this.props.match.params.userId: this.props.authorizedUserId;\r\n\r\n        this.props.getUserProfile(userId);\r\n        this.props.getStatus(userId);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Content {...this.props} profile={this.props.profile} status={this.props.status} updateStatus={this.props.updateStatus}/>\r\n        )\r\n    }\r\n}\r\n\r\nconst ProfileURLMatch = (props) => {\r\n    const match = useMatch('/profile/:userId/');\r\n    return <ContentContainer {...props} match={match} />;\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    profile: state.contentPage.profile,\r\n    status: state.contentPage.status, /*место где и откуда мы получаем статус*/\r\n    authorizedUserId: state.auth.id, /*тут мы берем наш userId */\r\n    isAuth: state.auth.isAuth /*тут мы берем инфу авторизованы или нет */\r\n})\r\n\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus} ),\r\n    withAuthRedirect,\r\n)(ProfileURLMatch)\r\n\r\n\r\n\r\n\r\n/*/!*тут мы вызываем HOC с нужной целевой компонентой*!/\r\n/!*AuthRedirectComponent построили над ContentContainer*!/\r\nlet AuthRedirectComponent = withAuthRedirect(ContentContainer);*/\r\n\r\n\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport classes from'./Header.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Header = (props) =>{\r\n    return <header className={classes.header}>\r\n    <img src='https://images.squarespace-cdn.com/content/v1/5b8f9107b105986303431f14/1536137733445-C0OIK3M1MJRKX9ZO34Z7/logo-header.png' />\r\n\r\n        /*тоесть если я авторизован то пишем логин*/\r\n    <div className={classes.loginBlock}>\r\n        {props.isAuth\r\n            ? <div>{props.login} - <button onClick={props.logout}>Log out</button></div>\r\n            : <NavLink to=\"/login\" >Login</NavLink> }\r\n    </div>\r\n  </header >;\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport Header from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport { logout} from \"../../redux/Auth-reducer\";\r\n\r\n\r\nclass HeaderContainer extends React.Component {\r\n\r\n    render() {\r\n        return <Header {...this.props} />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login,\r\n});\r\n\r\nexport default connect(mapStateToProps, { logout}) (HeaderContainer);","import React from 'react';\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Input} from \"../common/FormsControls/FormsControls\";\r\nimport {required} from \"../../Utils/validators/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/Auth-reducer\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport style from \"./../common/FormsControls/FormsControls.module.css\"\r\n\r\n\r\n/*деструктуризация вместо props пишем что нам нужно*/\r\nconst LoginForm = ({handleSubmit, error}) => {\r\n    debugger\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field placeholder={\"Email\"} validate={[required]} name={\"email\"} component={Input}/> {/*используем кастомный инпут*/}\r\n            </div>\r\n            <div>\r\n                <Field placeholder={\"Password\"} validate={[required]} name={\"password\"} component={Input}/>\r\n            </div>\r\n            <div>\r\n                <Field type={\"checkbox\"} name={\"rememberMe\"} component={Input}/> remember me\r\n            </div>\r\n            {error && <div className={style.formSummaryError}> {error} </div>} {/*если в пропсах есть ошибка то мы покажем props.error*/}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm({form: 'login'}) (LoginForm)\r\n\r\n/*onSubmit сюда приходят все собранные данные из форм*/\r\nconst Login = (props) => {\r\n    const onSubmit = (formData) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe);\r\n    }\r\n    /*если в пропсах придет что мы залогинены тогда мы делаем редирект*/\r\n    if (props.isAuth) {\r\n        return  <Navigate replace to=\"/profile\" />\r\n    }\r\n    /* а если в пропсах придет что мы НЕ залогинены тогда мы отправимся в поле логинизации*/\r\n    return <div>\r\n        <h1>Login</h1>\r\n        <LoginReduxForm onSubmit={onSubmit}/>\r\n    </div>\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\nisAuth: state.auth.isAuth\r\n})\r\n\r\nexport default connect (mapStateToProps,{login}) (Login);","import React, {Component, Suspense, lazy} from 'react';\nimport './App.css';\nimport Nav from './components/Nav/Nav';\nimport {Route, Routes} from \"react-router-dom\";\nimport UsersContainer from \"./components/Users/UsersContainer\";\nimport ContentContainer from \"./components/Content/ContentContainer\";\nimport HeaderContainer from \"./components/Header/Header-Container\";\nimport LoginPage from \"./components/Login/Login\";\nimport {connect} from \"react-redux\";\nimport {initializeApp} from \"./redux/App-reducer\";\nimport Preloader from \"./components/common/Preloader/Preloader\"; /*когда импортируем по дефолту можно импортировать под другим именем*/\n\nconst DialogsContainer = React.lazy(() =>\n    import('./components/Dialogs/DialogsContainer'));\n\n\nclass App extends Component {\n    componentDidMount() {\n        this.props.initializeApp();\n    }\n\n/*если мы не проинициализировались тогда верни крутилку прелоадер*/\n    render() {\n        if(!this.props.initialized) {\n            return <Preloader/>\n        }\n\n        return (\n            <div className='app-wrapper'>\n                <HeaderContainer/>\n                <Nav/>\n                <div className='app-wrapper-content'>\n                    <div className='item'>\n                        <Routes>\n                            <Route path=\"/profile/*\"\n                                   element={<ContentContainer/>}/>\n                            <Route path=\"/login\"\n                                   element={<LoginPage/>}/>\n\n                            <Route path=\"/profile/:userId\"\n                                   element={<ContentContainer/>}/>\n\n                            <Route path=\"/dialogs/*\"\n                                   element={\n                                       <Suspense fallback={<Preloader/>}>\n                                       <DialogsContainer/>\n                                       </Suspense>\n                                   }/>\n\n                            <Route path=\"/users\"\n                                   element={<UsersContainer/>}/>\n                        </Routes>\n                    </div>\n                </div>\n            </div>)\n\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    initialized: state.app.initialized\n\n})\n\nexport default connect(mapStateToProps, {initializeApp}) (App);\n\n","import reportWebVitals from './reportWebVitals';\nimport store from \"./redux/redux-store\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {BrowserRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\n\n\nReactDOM.render(\n        <React.StrictMode>\n            <BrowserRouter>\n                <Provider store={store}> {/*все внутренние компоненты будут иметь доступ к context*/}\n                <App />\n                </Provider>\n            </BrowserRouter>\n        </React.StrictMode>,\n        document.getElementById('root')\n    );\n\n\n\n\n\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","/*функция про обязательное поле*/\r\nexport const required = value => {\r\n    if (value) return undefined;\r\n    return \"Field is required\";\r\n}\r\n\r\n/*это thunk*/\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`; /*если длинна больше опр количества символов покажем сноску*/\r\n    return undefined; /*в противном случае покажем undefined*/\r\n}","import React from 'react';\r\nimport styles from \"./FormsControls.module.css\"\r\n\r\nconst FormControl = ({input,meta: {touched, error}, children, ...props}) => {\r\n    /*отдельно вынесли мета тачед плюс мета эррор*/\r\n    const hasError = touched && error;\r\n\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n            <div>\r\n                {children} {/*общий код для Textarea и Input одинаков и именно в этом месте поставл кастомные чилдрены Textarea и Input*/}\r\n            </div>\r\n            { hasError && <span>{error}</span> }  {/*если в мета был зафиксирован тачед и есть еррор то мы его покажем*/}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n/*хитрая ситуация мы достаем input и meta а оставшиеся данные деструктуризируем через ...props*/\r\nexport const Textarea = (props) => {\r\n    const {input,meta, child, element, ...restProps} = props;\r\n    return <FormControl {...props}><textarea {...input} {...restProps}/></FormControl>\r\n}\r\n/*также создаем кастомный инпут*/\r\nexport const Input = (props) => {\r\n    const {input,meta, child, element, ...restProps} = props;\r\n    return <FormControl {...props}><input {...input} {...restProps}/></FormControl>\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__1tZgT\",\"error\":\"FormsControls_error__1GNu9\",\"formSummaryError\":\"FormsControls_formSummaryError__3ffzf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pageNumber\":\"Paginator_pageNumber__2Fzys\",\"selectedPage\":\"Paginator_selectedPage__Q_NQN\",\"paginator\":\"Paginator_paginator__L0Pl_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__392AT\",\"posts\":\"MyPosts_posts__3ehED\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1FH41\",\"loginBlock\":\"Header_loginBlock__1Svbp\"};","const SEND_MESSAGE = 'SEND_MESSAGE'\r\n\r\n/*initialState это стартовый state*/\r\nlet initialState = {\r\n    dialogsData: [\r\n        {id: 1, name: 'Dima'},\r\n        {id: 2, name: 'Andrey'}, //это объекты\r\n        {id: 3, name: 'Sveta'},\r\n        {id: 4, name: 'Sasha'},\r\n        {id: 5, name: 'Viktor'},\r\n        {id: 6, name: 'Valera'},\r\n    ],\r\n    messagesData: [\r\n        {id: 1, message: 'Hello Mister bulka'},\r\n        {id: 2, message: 'yes it easy peasy'},\r\n        {id: 3, message: 'yo men'},\r\n        {id: 4, message: 'Oh my god'},\r\n        {id: 5, message: 'I love you'},\r\n        {id: 6, message: 'Hi its Ilon Mask'},\r\n    ]\r\n};\r\n\r\nconst dialogsReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) { /*тут мы указываем по какому параметру делается switch*/\r\n\r\n\r\n        case SEND_MESSAGE:\r\n            let body = action.newMessageBody;\r\n            return {\r\n                ...state,\r\n                messagesData: [...state.messagesData, {id: 7, message: body}], //создаем новый объект слева все элементы из старого объекта\r\n                // а с права пушим новое сообщение в массив\r\n            };\r\n\r\n\r\n        default: /*если ни один сценарий не пригодился идет return без изменений*/\r\n            return state;\r\n    }\r\n}\r\nexport const sendMessageCreator = (newMessageBody) => ({type: SEND_MESSAGE, newMessageBody})\r\n\r\nexport default dialogsReducer;"],"sourceRoot":""}