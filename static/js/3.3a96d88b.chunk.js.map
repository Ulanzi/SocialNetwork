{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/Message/Message.jsx","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","Message","props","className","classes","message","DialogItem","path","id","dialog","active","to","name","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","Dialogs","state","dialogsPage","dialogsElements","dialogsData","map","messagesElements","messagesData","m","newMessageBody","isAuth","dialogs","dialogsItems","messages","values","sendMessage","compose","connect","dispatch","sendMessageCreator","withAuthRedirect"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,kFCYnKC,EAPC,SAACC,GACb,OAAO,qBAAKC,UAAWC,IAAQC,QAAxB,SAAkCH,EAAMG,W,QCOpCC,EAVI,SAACJ,GAChB,IAAIK,EAAO,YAAcL,EAAMM,GAC/B,OACI,qBAAKL,UAAWC,IAAQK,OAAS,IAAML,IAAQM,OAA/C,SACI,cAAC,IAAD,CAASC,GAAIJ,EAAb,SAAoBL,EAAMU,U,yCCChCC,EAAcC,YAAiB,IA6C/BC,EAAsBC,YAAW,CAACC,KAAM,wBAAlBD,EAdL,SAACd,GACpB,OACI,uBAAMgB,SAAUhB,EAAMiB,aAAtB,UACI,8BACI,cAACC,EAAA,EAAD,CAAOC,UAAWC,IAAUC,SAAU,CAACC,IAAUX,GAC1CD,KAAM,iBAAkBa,YAAa,wBAEhD,8BACI,0DAQDC,EA7CC,SAACxB,GACb,IAAIyB,EAAQzB,EAAM0B,YAEdC,EAAkBF,EAAMG,YAAYC,KAAI,SAAAtB,GAAM,OAAI,cAAC,EAAD,CAAYG,KAAMH,EAAOG,KACbJ,GAAIC,EAAOD,IADaC,EAAOD,OAE7FwB,EAAmBL,EAAMM,aAAaF,KAAI,SAAAG,GAAC,OAAI,cAAC,EAAD,CAAS7B,QAAS6B,EAAE7B,SAAc6B,EAAE1B,OAClEmB,EAAMQ,eAQ3B,OAAqB,IAAjBjC,EAAMkC,OAAyB,cAAC,IAAD,CAAUzB,GAAI,WAG7C,sBAAKR,UAAWC,IAAQiC,QAAxB,UACI,qBAAKlC,UAAWC,IAAQkC,aAAxB,SACKT,IAEL,qBAAK1B,UAAWC,IAAQmC,SAAxB,SACI,oCAAOP,OAEX,cAAEjB,EAAF,CAAsBG,SAdV,SAACsB,GACjBtC,EAAMuC,YAAYD,EAAOL,uB,wBCuBlBO,sBACXC,aAdkB,SAAChB,GACnB,MAAO,CACHC,YAAaD,EAAMC,gBAKF,SAACgB,GACtB,MAAO,CACHH,YAAa,SAACN,GAAoBS,EAASC,YAAmBV,SAMlEW,IAFWJ,CAGZhB","file":"static/js/3.3a96d88b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3BYRG\",\"dialogsItems\":\"Dialogs_dialogsItems__3aqtN\",\"active\":\"Dialogs_active__oBtjx\",\"messages\":\"Dialogs_messages__3o8he\",\"message\":\"Dialogs_message__2KtCC\"};","import React from 'react';\r\nimport classes from './../Dialogs.module.css';\r\n\r\n\r\n\r\n\r\nconst Message = (props) => {\r\n    return <div className={classes.message}>{props.message}</div>\r\n}\r\n\r\n\r\n\r\n\r\nexport default Message;","import React from 'react';\r\nimport classes from './../Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst DialogItem = (props) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n    return (\r\n        <div className={classes.dialog + ' ' + classes.active}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>)\r\n}\r\n\r\n\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport classes from './Dialogs.module.css';\r\nimport Message from \"./Message/Message\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../Utils/validators/validators\";\r\n\r\nconst maxLength50 = maxLengthCreator(50)  /*отдельно создали часть validate*/\r\n\r\nconst Dialogs = (props) => {\r\n    let state = props.dialogsPage; //создали локальную переменную STATE и присвоили ей значение через props\r\n\r\n    let dialogsElements = state.dialogsData.map(dialog => <DialogItem name={dialog.name} key={dialog.id}\r\n                                                                      id={dialog.id}/>);\r\n    let messagesElements = state.messagesData.map(m => <Message message={m.message} key={m.id}/>);\r\n    let newMessageBody = state.newMessageBody;\r\n\r\n\r\n    /*когда форма соберет все данные вызовится эта функция sendMessage со значением newMessageBody*/\r\n    let addNewMessage = (values) => {\r\n        props.sendMessage(values.newMessageBody);\r\n    }\r\n\r\n    if (props.isAuth === false) return <Navigate to={\"/login\"}/>; /*если мы не залогинены то вернется редирект на логин*/\r\n\r\n    return (\r\n        <div className={classes.dialogs}>\r\n            <div className={classes.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={classes.messages}>\r\n                <div> {messagesElements}</div>\r\n            </div>\r\n            < AddMessageFormRedux onSubmit={addNewMessage}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst addMessageForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} validate={[required, maxLength50 ]}\r\n                       name={\"newMessageBody\"} placeholder={\"Enter you message\"} />\r\n            </div>\r\n            <div>\r\n                <button>Send Message</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm ({form: \"dialogAddMessageForm\"}) (addMessageForm); /*создаем контейнерную вокруг addMessageForm*/\r\n\r\nexport default Dialogs;","import React from 'react';\r\nimport {sendMessageCreator} from \"../../redux/Dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n/*это олдскульный нами созданный container\r\nconst DialogsContainer = () => {\r\n\r\n\r\n    return <StoreContext.Consumer>\r\n        { (store) => {\r\n            let state = store.getState().dialogsPage; //создали локальную переменную STATE и присвоили ей значение через props\r\n\r\n\r\n\r\n            let onSendMessageClick = () => {\r\n                store.dispatch(sendMessageCreator()) //оборачиваем dispatch в функции и передаем их как callback\r\n            }\r\n            let onNewMessageClick = (body) => {\r\n                store.dispatch(updateNewMessageBodyCreator(body)) //используем подготовленные action из BLL\r\n            }\r\n            return <Dialogs updateNewMessageBody={onNewMessageClick} sendMessage={onSendMessageClick}\r\n                     dialogsPage={state}/>\r\n        }\r\n    }\r\n    </StoreContext.Consumer>\r\n}*/\r\n\r\n\r\n//первая функция превращает часть state в props\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\n//вторая функция обрабатывает callback которые мы отправляем в презентационную компоненту\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        sendMessage: (newMessageBody) => {dispatch(sendMessageCreator(newMessageBody))}\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n) (Dialogs)\r\n\r\n/*/!*ЭТО СТАРЫЙ КОД ЕГО МЫ ЗАМЕНИЛИ НА COMPOSE!!!  тут мы вызываем HOC с нужной целевой компонентой*!/\r\n/!*AuthRedirectComponent построили над Dialogs*!/\r\nlet AuthRedirectComponent = withAuthRedirect(Dialogs);\r\n\r\n\r\n//первые две функции настраивают connect. Вторая скобка это то что мы коннектим к Store\r\nconst DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent);\r\nexport default DialogsContainer;*/\r\n\r\n"],"sourceRoot":""}